
#############Nearest Smaller to left###############################################

#def nearest_smaller_to_left(arr):
#    s=[]
#    v=[]
#    for i in range(0,len(arr)):
#        if len(s)==0:
#            v.append(-1)
#        elif len(s)>0 and s[-1]>arr[i]:
#            v.append(s[-1])
#        elif len(s)>0 and s[-1]<=arr[i]:
#            while len(s)>0 and s[-1]<=arr[i]:
#                s.pop()
#            if len(s)==0:
#                v.append(-1)
#            else:
#                v.append(s[-1])
#        s.append(arr[i])
#    return v



###############Nearest Greater to left #################################################################################
#def nearest_greater_toleft(arr):
#    s=[]
#    v=[]
#    for i in range(0,len(arr)):
#        if len(s)==0:
#            v.append(-1)
#        elif len(s)>0 and s[-1]>arr[i]:
#            v.append(s[-1])
#        elif len(s)>0 and s[-1]<=arr[i]:
#            while len(s)>0 and s[-1]<=arr[i]:
#                s.pop()
#            if len(s)==0:
#                v.append(-1)
#            else:
#                v.append(s[-1])
#        s.append(arr[i])
#    return v


##########################Nearest greater to right  ##############################################################################

#def nearest_greater_toright(arr):
#    s=[]
#    v=[]
#    for i in range(len(arr)-1,-1,-1):
#        if len(s)==0:
#            v.append(-1)
#        elif len(s)>0 and s[-1]>arr[i]:
#            v.append(s[-1])
#        elif len(s)>0 and s[-1]<=arr[i]:
#            while len(s)>0 and s[-1]<=arr[i]:
#                s.pop()
#            if len(s)==0:
#                v.append(-1)
#            else:
#                v.append(s[-1])
#        s.append(arr[i])
#    return v[::-1]

######################### Nearest smaller to right#######################################################################


#def nearest_smaller_toright(arr):
#    s=[]
#    v=[]
#    for i in range(len(arr)-1,-1,-1):
#        if len(s)==0:
#            v.append(-1)
#        elif len(s)>0 and s[-1]<arr[i]:
#            v.append(s[-1])
#        elif len(s)>0 and s[-1]>=arr[i]:
#            while len(s)>0 and s[-1]>=arr[i]:
#                s.pop()
#            if len(s)==0:
#                v.append(-1)
#            else:
#                v.append(s[-1])
#        s.append(arr[i])
#    return v[::-1]


######################## Stock_span ##################################################################################


#def stock_span(arr):
#   s=[]
#    v=[]
#    for i in range(0,len(arr)):
#        stk_span=1
#        if len(s)>0 and s[-1]<arr[i]:
#            j=len(s)-1
#            while j>=0 and s[j]<arr[i]:
#                stk_span=stk_span+1
#                j=j-1
#        s.append(arr[i])
#        v.append(stk_span)
#    return v
#arr=[6,2,8,3]
#print(stock_span(arr))
#####output=[1,1,3,1]

########################################AREA_OF_HISTOGRAM##############################################################

#def nearest_smaller_toright_index(arr):
#    s=[]
#    v=[]
#    for i in range(len(arr)-1,-1,-1):
#        if len(s)==0:
#            v.append(len(arr))
#        elif len(s)>0 and s[-1]<arr[i]:
#            v.append(arr.index(s[-1]))
#        elif len(s)>0 and s[-1]>=arr[i]:
#            while len(s)>0 and s[-1]>=arr[i]:
#                s.pop()
#            if len(s)==0:
#                v.append(len(arr))
#            else:
#                v.append(arr.index(s[-1]))
#        s.append(arr[i])
#    return v[::-1]
#
#def nearest_smaller_toleft_index(arr):
#    s=[]
#    v=[]
#    for i in range(0,len(arr)):
#        if len(s)==0:
#            v.append(-1)
#        elif len(s)>0 and s[-1]<arr[i]:
#            v.append(arr.index(s[-1]))
#        elif len(s)>0 and s[-1]>=arr[i]:
#            while len(s)>0 and s[-1]>=arr[i]:
#                s.pop()
#            if len(s)==0:
#                v.append(-1)
#            else:
#                v.append(arr.index(s[-1]))
#        s.append(arr[i])
#    return v
#
#def area_of_histogram(arr):
#    left=nearest_smaller_toleft_index(arr)
#    right=nearest_smaller_toright_index(arr)
#    areas=[]
#    for i in range(0,len(arr)):
#        areas.append(arr[i]*(right[i]-left[i]-1))
#
#    return max(areas)
#
#arr=[6,2,8,3]
#print(area_of_histogram(arr))
#output=8
#arr2=[6,2,5,4,5,1,6]
#print(area_of_histogram(arr2))
#output=12

#################### minimum no of reversals_to_balance_the _stack #############################
#def no_reverse(expression):
#    s=[]
#    for i in expression:
#        if i == "{":
#            s.append(i)
#        elif i== "}":
#            if len(s)!=0 and s[-1]=="{":
#                s.pop()
#            elif len(s) == 0 or s[-1]=="}":
#                s.append(i)
#    new_len=len(s)
#    c_openbrackets=0
#    while len(s)!=0 and s[-1]=="{":
#            s.pop()
#            c_openbrackets+=1
#    if new_len%2==0:
#            return ((new_len//2)+(c_openbrackets%2))
#    return -1
#ex="}{{}{}"
#print(no_reverse(ex))
#output:
#2
#
